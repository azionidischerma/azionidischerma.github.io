{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","enablePersistence","catch","err","code","CambiaMossa","this","interval","setInterval","setState","time","Date","now","clearInterval","props","mosse","Math","floor","random","length","React","Component","Mossa","useState","setMosse","db","collection","doc","get","then","exists","data","lista","console","log","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iSAgBAA,gBAVuB,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAITP,cAAqBQ,oBAClBC,OAAM,SAASC,GACK,wBAAbA,EAAIC,MAIGD,EAAIC,Q,IAOfC,E,kLACiB,IAAD,OAClBC,KAAKC,SAAWC,aAAY,kBAAM,EAAKC,SAAS,CAAEC,KAAMC,KAAKC,UAAU,Q,6CAGvEC,cAAcP,KAAKC,Y,+BAGnB,OAAO,2BAAID,KAAKQ,MAAMC,MAAMC,KAAKC,MAAMD,KAAKE,SAAWZ,KAAKQ,MAAMC,MAAMI,c,GARlDC,IAAMC,WAYhC,SAASC,IAAS,IAAD,EACWC,mBAAS,CAAC,mBADrB,mBACRR,EADQ,KACDS,EADC,KAETC,EAAKhC,cACM,mBAAbsB,EAAM,IACOU,EAAGC,WAAW,SACpBC,IAAI,wBAAwBC,MACpCC,MAAK,SAAAF,GACCA,EAAIG,OAGPN,EAASG,EAAII,OAAOC,OAFpBC,QAAQC,IAAI,wBAKfhC,OAAM,SAAAC,GACL8B,QAAQC,IAAI,yBAA0B/B,MAI1C,OAAO,kBAAC,EAAD,CAAaY,MAAOA,IAcdoB,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACd,EAAD,SCxDFe,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTf,MAAK,SAAAoB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BtB,QAAQC,IACN,iHAKEW,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBhB,QAAQC,IAAI,sCAGRW,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5B/C,OAAM,SAAAwD,GACLzB,QAAQyB,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,WAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,WAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BzC,MAAK,SAAA0C,GAEJ,IAAMC,EAAcD,EAASD,QAAQ1C,IAAI,gBAEnB,MAApB2C,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM9C,MAAK,SAAAoB,GACjCA,EAAa2B,aAAa/C,MAAK,WAC7BU,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1B3C,OAAM,WACL+B,QAAQC,IACN,oEAvFA4C,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM9C,MAAK,WACjCI,QAAQC,IACN,iHAMJS,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.61b9223b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nimport * as firebase from \"firebase/app\";\nimport '@firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCe8mQ5RcM_tm7LPvM1kxbJ211Fq7G3fFA\",\n  authDomain: \"scherma-d21ad.firebaseapp.com\",\n  databaseURL: \"https://scherma-d21ad.firebaseio.com\",\n  projectId: \"scherma-d21ad\",\n  storageBucket: \"scherma-d21ad.appspot.com\",\n  messagingSenderId: \"720411353134\",\n  appId: \"1:720411353134:web:d7c17466ebf51edc34ffbf\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore().enablePersistence()\n  .catch(function(err) {\n      if (err.code === 'failed-precondition') {\n          // Multiple tabs open, persistence can only be enabled\n          // in one tab at a a time.\n          // ...\n      } else if (err.code === 'unimplemented') {\n          // The current browser does not support all of the\n          // features required to enable persistence\n          // ...\n      }\n  });\n\nclass CambiaMossa extends React.Component {\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ time: Date.now() }), 1500);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render(){\n    return <p>{this.props.mosse[Math.floor(Math.random() * this.props.mosse.length)]}</p>\n  }\n}\n\nfunction Mossa() {\n  const [mosse, setMosse] = useState([\"caricamento...\"]);\n  const db = firebase.firestore();\n  if (mosse[0] === \"caricamento...\"){\n    var mosseRef = db.collection(\"mosse\");\n    mosseRef.doc(\"oueHRRQQ7wt6sV087Ynl\").get()\n    .then(doc => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        setMosse(doc.data().lista);\n      }\n    })\n    .catch(err => {\n      console.log('Error getting document', err);\n    });\n\n  }\n  return <CambiaMossa mosse={mosse} />\n }\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Mossa />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}